<?xml version="1.0" encoding="UTF-8"?>
<!-- ***************************************************************************
* Copyright (c) 2013 École Polytechnique de Montréal
*
* All rights reserved. This program and the accompanying materials are
* made available under the terms of the Eclipse Public License v1.0 which
* accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     Florian Wininger - Initial API and implementation
*************************************************************************** -->
<tmfxml xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="xmlDefinition.xsd">

    <xyView id="org.eclipse.linuxtools.tmf.analysis.xml.core.tests.xy.pattern.fsm">
        <head>
            <analysis id="kernel.linux.pattern.from.fsm" />
            <label value="Xml XY view CPU Status" />
        </head>

        <entry path="CPUs/*">
            <display type="constant" value="Status" />
            <name type="self" />
        </entry>
    </xyView>


    <pattern id="kernel.linux.pattern.from.fsm" version="0">
        <head>
            <traceType id="org.eclipse.linuxtools.lttng2.kernel.tracetype" />
            <label value="Xml kernel State System Pattern from FSM" />
        </head>

        <definedValue name="CPU_STATUS_IDLE" value="0" />
        <definedValue name="CPU_STATUS_RUN_USERMODE" value="1" />
        <definedValue name="CPU_STATUS_RUN_SYSCALL" value="2" />
        <definedValue name="CPU_STATUS_IRQ" value="3" />
        <definedValue name="CPU_STATUS_SOFTIRQ" value="4" />

        <definedValue name="PROCESS_STATUS_UNKNOWN" value="0" />
        <definedValue name="PROCESS_STATUS_WAIT_BLOCKED" value="1" />
        <definedValue name="PROCESS_STATUS_RUN_USERMODE" value="2" />
        <definedValue name="PROCESS_STATUS_RUN_SYSCALL" value="3" />
        <definedValue name="PROCESS_STATUS_INTERRUPTED" value="4" />
        <definedValue name="PROCESS_STATUS_WAIT_FOR_CPU" value="5" />

        <!-- Shortcut Variables -->
        <location id="CurrentThread">
            <stateAttribute type="constant" value="Threads" />
            <stateAttribute type="query">
                <stateAttribute type="constant" value="CPUs" />
                <stateAttribute type="eventField" value="cpu" />
                <stateAttribute type="constant" value="Current_thread" />
            </stateAttribute>
        </location>
        <location id="CurrentCPU">
            <stateAttribute type="constant" value="CPUs" />
            <stateAttribute type="eventField" value="cpu" />
        </location>
        <location id="CurrentIRQ">
            <stateAttribute type="constant" value="Resources"/>
            <stateAttribute type="constant" value="IRQs"/>
            <stateAttribute type="eventField" value="irq"/>
        </location>
        <location id="CurrentSoftIRQ">
            <stateAttribute type="constant" value="Resources" />
            <stateAttribute type="constant" value="Soft_IRQs" />
            <stateAttribute type="eventField" value="vec" />
        </location>
        <location id="newCurrentThread">
            <stateAttribute type="constant" value="Threads" />
            <stateAttribute type="eventField" value="next_tid" />
        </location>

        <patternHandler>

            <!-- CPU status update actions -->

            <action id="update_cpu_to_idle">
                <stateChange>
                    <stateAttribute type="location" value="CurrentCPU" />
                    <stateAttribute type="constant" value="Status" />
                    <stateValue type="int" value="$CPU_STATUS_IDLE" />
                </stateChange>
            </action>

            <action id="update_cpu_to_usermode">
                <stateChange>
                    <stateAttribute type="location" value="CurrentCPU" />
                    <stateAttribute type="constant" value="Status" />
                    <stateValue type="int" value="$CPU_STATUS_RUN_USERMODE" />
                </stateChange>
            </action>

            <action id="update_cpu_to_syscall">
                <stateChange>
                    <stateAttribute type="location" value="CurrentCPU" />
                    <stateAttribute type="constant" value="Status" />
                    <stateValue type="int" value="$CPU_STATUS_RUN_SYSCALL" />
                </stateChange>
            </action>

            <action id="update_cpu_to_irq">
                <stateChange>
                    <stateAttribute type="location" value="CurrentCPU" />
                    <stateAttribute type="constant" value="Status" />
                    <stateValue type="int" value="$CPU_STATUS_IRQ" />
                </stateChange>
            </action>

            <action id="update_cpu_to_softirq">
                <stateChange>
                    <stateAttribute type="location" value="CurrentCPU" />
                    <stateAttribute type="constant" value="Status" />
                    <stateValue type="int" value="$CPU_STATUS_SOFTIRQ" />
                </stateChange>
            </action>

            <!-- Process status update actions -->

            <action id="update_process_to_unknown">
                <stateChange>
                    <stateAttribute type="location" value="CurrentCPU" />
                    <stateAttribute type="constant" value="Status" />
                    <stateValue type="int" value="$PROCESS_STATUS_UNKNOWN" />
                </stateChange>
            </action>

            <action id="update_process_to_wait_blocked">
                <stateChange>
                    <stateAttribute type="location" value="CurrentCPU" />
                    <stateAttribute type="constant" value="Status" />
                    <stateValue type="int" value="$PROCESS_STATUS_WAIT_BLOCKED" />
                </stateChange>
            </action>

            <action id="update_process_to_usermode">
                <stateChange>
                    <stateAttribute type="location" value="CurrentCPU" />
                    <stateAttribute type="constant" value="Status" />
                    <stateValue type="int" value="$PROCESS_STATUS_RUN_USERMODE" />
                </stateChange>
            </action>

            <action id="update_process_to_syscall">
                <stateChange>
                    <stateAttribute type="location" value="CurrentCPU" />
                    <stateAttribute type="constant" value="Status" />
                    <stateValue type="int" value="$PROCESS_STATUS_RUN_SYSCALL" />
                </stateChange>
            </action>

            <action id="update_process_to_interrupted">
                <stateChange>
                    <stateAttribute type="location" value="CurrentCPU" />
                    <stateAttribute type="constant" value="Status" />
                    <stateValue type="int" value="$PROCESS_STATUS_INTERRUPTED" />
                </stateChange>
            </action>

            <action id="update_process_to_wait_cpu">
                <stateChange>
                    <stateAttribute type="location" value="CurrentCPU" />
                    <stateAttribute type="constant" value="Status" />
                    <stateValue type="int" value="$PROCESS_STATUS_WAIT_FOR_CPU" />
                </stateChange>
            </action>

            <!-- Other actions -->

            <action id="set_current_thread_system_call_null">
                <stateChange>
                    <stateAttribute type="location" value="CurrentThread" />
                    <stateAttribute type="constant" value="System_call" />
                    <stateValue type="null" />
                </stateChange>
            </action>

            <action id="set_current_cpu_current_thread_next_tid">
                <stateChange>
                    <stateAttribute type="location" value="CurrentCPU" />
                    <stateAttribute type="constant" value="Current_thread" />
                    <stateValue type="eventField" value="next_tid" forcedType="int" />
                </stateChange>
            </action>

            <action id="set_child_thread_system_call_parent_thread_system_call">
                <stateChange>
                    <stateAttribute type="constant" value="Threads" />
                    <stateAttribute type="eventField" value="child_tid" />
                    <stateAttribute type="constant" value="System_call" />
                    <stateValue type="query">
                        <stateAttribute type="constant" value="Threads" />
                        <stateAttribute type="eventField" value="parent_tid" />
                        <stateAttribute type="constant" value="System_call" />
                    </stateValue>
                </stateChange>
            </action>

            <action id="set_child_thread_system_call_sys_clone">
                <stateChange>
                    <stateAttribute type="constant" value="Threads" />
                    <stateAttribute type="eventField" value="child_tid" />
                    <stateAttribute type="constant" value="System_call" />
                    <stateValue type="string" value="sys_clone" />
                </stateChange>
            </action>

            <action id="set_current_thread_system_call_eventname">
                <stateChange>
                    <stateAttribute type="location" value="CurrentThread" />
                    <stateAttribute type="constant" value="System_call" />
                    <stateValue type="eventName" />
                </stateChange>
            </action>

            <!-- Conditions -->

            <test id="current_thread_system_call_null">
                <if>
                    <condition>
                        <stateAttribute type="location" value="CurrentThread" />
                        <stateAttribute type="constant" value="System_call" />
                        <stateValue type="null" />
                    </condition>
                </if>
            </test>

            <test id="current_thread_system_call_not_null">
                <if>
                    <not>
                        <condition>
                            <stateAttribute type="location" value="CurrentThread" />
                            <stateAttribute type="constant" value="System_call" />
                            <stateValue type="null" />
                        </condition>
                    </not>
                </if>
            </test>

            <test id="new_current_thread_system_call_not_null_and_next_tid_not_0">
                <if>
                    <and>
                        <not>
                            <condition>
                                <stateAttribute type="location" value="newCurrentThread" />
                                <stateAttribute type="constant" value="System_call" />
                                <stateValue type="null" />
                            </condition>
                        </not>
                        <not>
                            <condition>
                                <field name="next_tid" />
                                <stateValue type="long" value="0" />
                            </condition>
                        </not>
                    </and>
                </if>
            </test>

            <test id="new_current_thread_system_call_null_and_next_tid_0">
                <if>
                    <and>
                        <condition>
                            <stateAttribute type="location" value="newCurrentThread" />
                            <stateAttribute type="constant" value="System_call" />
                            <stateValue type="null" />
                        </condition>
                        <condition>
                            <field name="next_tid" />
                            <stateValue type="long" value="0" />
                        </condition>
                    </and>
                </if>
            </test>

            <test id="current_cpu_current_thread_null">
                <if>
                    <condition>
                        <stateAttribute type="location" value="CurrentCPU" />
                        <stateAttribute type="constant" value="Current_thread" />
                        <stateValue type="null" />
                    </condition>
                </if>
            </test>

            <test id="current_cpu_current_thread_0">
                <if>
                    <condition>
                        <stateAttribute type="location" value="CurrentCPU" />
                        <stateAttribute type="constant" value="Current_thread" />
                        <stateValue type="int" value="0" />
                    </condition>
                </if>
            </test>

            <test id="child_thread_system_call_null">
                <if>
                    <condition>
                        <stateAttribute type="constant" value="Threads" />
                        <stateAttribute type="eventField" value="child_tid" />
                        <stateAttribute type="constant" value="System_call" />
                        <stateValue type="null" />
                    </condition>
                </if>
            </test>

            <test id="test_for_unknown_process_state">
                <if>
                    <and>
                        <and>
                            <condition>
                                <stateAttribute type="constant" value="Threads" />
                                <stateAttribute type="eventField" value="tid" />
                                <stateAttribute type="constant" value="Status" />
                                <stateValue type="null" />
                            </condition>
                            <not>
                                <condition>
                                    <field name="status" />
                                    <stateValue type="long" value="2" />
                                </condition>
                            </not>
                        </and>
                        <not>
                            <condition>
                                <field name="status" />
                                <stateValue type="long" value="5" />
                            </condition>
                        </not>
                    </and>
                </if>
            </test>

            <test id="test_for_wait_blocked_process_state">
                <if>
                    <and>
                        <condition>
                            <stateAttribute type="constant" value="Threads" />
                            <stateAttribute type="eventField" value="tid" />
                            <stateAttribute type="constant" value="Status" />
                            <stateValue type="null" />
                        </condition>
                        <condition>
                            <field name="status" />
                            <stateValue type="long" value="5" />
                        </condition>
                    </and>
                </if>
            </test>

            <test id="test_for_wait_cpu_process_state">
                <if>
                    <and>
                        <condition>
                            <stateAttribute type="constant" value="Threads" />
                            <stateAttribute type="eventField" value="tid" />
                            <stateAttribute type="constant" value="Status" />
                            <stateValue type="null" />
                        </condition>
                        <condition>
                            <field name="status" />
                            <stateValue type="long" value="2" />
                        </condition>
                    </and>
                </if>
            </test>

            <test id="test_for_sched_wakeup">
                <if>
                    <and>
                        <not>
                            <condition>
                                <stateAttribute type="constant" value="Threads" />
                                <stateAttribute type="eventField" value="tid" />
                                <stateAttribute type="constant" value="Status" />
                                <stateValue type="int" value="$PROCESS_STATUS_RUN_USERMODE" />
                            </condition>
                        </not>
                        <not>
                            <condition>
                                <stateAttribute type="constant" value="Threads" />
                                <stateAttribute type="eventField" value="tid" />
                                <stateAttribute type="constant" value="Status" />
                                <stateValue type="int" value="$PROCESS_STATUS_RUN_SYSCALL" />
                            </condition>
                        </not>
                    </and>
                </if>
            </test>


            <fsm id="cpu_fsm" initial="idle">
                <state id="idle">
                    <transition event="irq_handler_entry" target="irq" action="update_cpu_to_irq" />
                    <transition event="softirq_entry" target="irq" action="update_cpu_to_softirq" />
                    <transition event="sched_process_fork" target="idle" action="set_child_thread_system_call_parent_thread_system_call" />
                    <transition event="sched_process_fork" target="idle" action="set_child_thread_system_call_parent_thread_system_call:set_child_thread_system_call_sys_clone" cond="child_thread_system_call_null" />
                </state>
                <state id="usermode">
                    <transition event="irq_handler_entry" target="irq" action="update_cpu_to_irq" />
                    <transition event="sched_switch" target="syscall" action="update_cpu_to_syscall:set_current_cpu_current_thread_next_tid" cond="new_current_thread_system_call_not_null_and_next_tid_not_0"/>
                    <transition event="sys_*" target="syscall" action="update_cpu_to_syscall:set_current_thread_system_call_eventname" />
                    <transition event="compat_sys_*" target="syscall" action="update_cpu_to_syscall:set_current_thread_system_call_eventname" />
                    <transition event="sched_process_fork" target="usermode" action="set_child_thread_system_call_parent_thread_system_call" />
                    <transition event="sched_process_fork" target="usermode" action="set_child_thread_system_call_parent_thread_system_call:set_child_thread_system_call_sys_clone" cond="child_thread_system_call_null" />
                </state>
                <state id="syscall">
                    <transition event="irq_handler_entry" target="irq" action="update_cpu_to_irq" />
                    <transition event="exit_syscall" target="usermode" action="update_cpu_to_usermode:set_current_thread_system_call_null" />
                    <transition event="sched_switch" target="usermode" action="update_cpu_to_usermode:set_current_cpu_current_thread_next_tid" cond="new_current_thread_system_call_null_and_next_tid_0"/>
                    <transition event="sched_process_fork" target="syscall" action="set_child_thread_system_call_parent_thread_system_call" />
                    <transition event="sched_process_fork" target="syscall" action="set_child_thread_system_call_parent_thread_system_call:set_child_thread_system_call_sys_clone" cond="child_thread_system_call_null" />
                </state>
                <state id="irq">
                    <transition event="irq_handler_exit" target="idle" action="update_cpu_to_idle" cond="current_cpu_current_thread_null" />
                    <transition event="irq_handler_exit" target="idle" action="update_cpu_to_idle" cond="current_cpu_current_thread_0" />
                    <transition event="irq_handler_exit" target="usermode" action="update_cpu_to_usermode" cond="current_thread_system_call_null" />
                    <transition event="irq_handler_exit" target="syscall" action="update_cpu_to_syscall" cond="current_thread_system_call_not_null" />
                    <transition event="sched_process_fork" target="irq" action="set_child_thread_system_call_parent_thread_system_call" />
                    <transition event="sched_process_fork" target="irq" action="set_child_thread_system_call_parent_thread_system_call:set_child_thread_system_call_sys_clone" cond="child_thread_system_call_null" />
                </state>
                <state id="softirq">
                    <transition event="softirq_exit" target="idle" action="update_cpu_to_idle" cond="current_cpu_current_thread_null" />
                    <transition event="softirq_exit" target="idle" action="update_cpu_to_idle" cond="current_cpu_current_thread_0" />
                    <transition event="softirq_exit" target="usermode" action="update_cpu_to_usermode" cond="current_thread_system_call_null" />
                    <transition event="softirq_exit" target="syscall" action="update_cpu_to_syscall" cond="current_thread_system_call_not_null" />
                    <transition event="sched_process_fork" target="softirq" action="set_child_thread_system_call_parent_thread_system_call" />
                    <transition event="sched_process_fork" target="softirq" action="set_child_thread_system_call_parent_thread_system_call:set_child_thread_system_call_sys_clone" cond="child_thread_system_call_null" />
                </state>
            </fsm>

            <fsm id="process_fsm" initial="unknown">
                <state id="unknown">
                    <transition event="lttng_statedump_process_state" target="unknown" action="update_process_to_unknown" cond="test_for_unknown_process_state" />
                    <transition event="lttng_statedump_process_state" target="wait_blocked" action="update_process_to_wait_blocked" cond="test_for_wait_blocked_process_state" />
                    <transition event="lttng_statedump_process_state" target="wait_cpu" action="update_process_to_wait_cpu" cond="test_for_wait_cpu_process_state" />
                    <transition event="irq_handler_entry" target="interrupted" action="update_process_to_interrupted" />
                    <transition event="softirq_entry" target="interrupted" action="update_process_to_interrupted" />
                </state>
                <state id="wait_blocked">
                    <transition event="lttng_statedump_process_state" target="unknown" action="update_process_to_unknown" cond="test_for_unknown_process_state" />
                    <transition event="lttng_statedump_process_state" target="wait_blocked" action="update_process_to_wait_blocked" cond="test_for_wait_blocked_process_state" />
                    <transition event="lttng_statedump_process_state" target="wait_cpu" action="update_process_to_wait_cpu" cond="test_for_wait_cpu_process_state" />
                    <transition event="irq_handler_entry" target="interrupted" action="update_process_to_interrupted" />
                    <transition event="softirq_entry" target="interrupted" action="update_process_to_interrupted" />
                </state>
                <state id="usermode">
                    <transition event="lttng_statedump_process_state" target="unknown" action="update_process_to_unknown" cond="test_for_unknown_process_state" />
                    <transition event="lttng_statedump_process_state" target="wait_blocked" action="update_process_to_wait_blocked" cond="test_for_wait_blocked_process_state" />
                    <transition event="lttng_statedump_process_state" target="wait_cpu" action="update_process_to_wait_cpu" cond="test_for_wait_cpu_process_state" />
                    <transition event="irq_handler_entry" target="interrupted" action="update_process_to_interrupted" />
                    <transition event="softirq_entry" target="interrupted" action="update_process_to_interrupted" />
                    <transition event="sched_process_fork" target="wait_cpu" action="update_process_to_wait_cpu" />
                    <transition event="sys_*" target="syscall" action="update_process_to_syscall" />
                    <transition event="compat_sys_*" target="syscall" action="update_process_to_syscall" />
                </state>
                <state id="syscall">
                    <transition event="lttng_statedump_process_state" target="unknown" action="update_process_to_unknown" cond="test_for_unknown_process_state" />
                    <transition event="lttng_statedump_process_state" target="wait_blocked" action="update_process_to_wait_blocked" cond="test_for_wait_blocked_process_state" />
                    <transition event="lttng_statedump_process_state" target="wait_cpu" action="update_process_to_wait_cpu" cond="test_for_wait_cpu_process_state" />
                    <transition event="irq_handler_entry" target="interrupted" action="update_process_to_interrupted" />
                    <transition event="softirq_entry" target="interrupted" action="update_process_to_interrupted" />
                    <transition event="exit_syscall" target="usermode" action="update_process_to_usermode" />
                </state>
                <state id="interrupted">
                    <transition event="lttng_statedump_process_state" target="unknown" action="update_process_to_unknown" cond="test_for_unknown_process_state" />
                    <transition event="lttng_statedump_process_state" target="wait_blocked" action="update_process_to_wait_blocked" cond="test_for_wait_blocked_process_state" />
                    <transition event="lttng_statedump_process_state" target="wait_cpu" action="update_process_to_wait_cpu" cond="test_for_wait_cpu_process_state" />
                    <transition event="sched_wakeup*" target="wait_cpu" action="update_process_to_wait_cpu" cond="test_for_sched_wakeup" />
                    <transition event="softirq_exit" target="usermode" action="update_process_to_usermode" cond="current_thread_system_call_null" />
                    <transition event="irq_handler_exit" target="usermode" action="update_process_to_usermode" cond="current_thread_system_call_null" />
                    <transition event="softirq_exit" target="syscall" action="update_process_to_syscall" cond="current_thread_system_call_not_null" />
                    <transition event="irq_handler_exit" target="syscall" action="update_process_to_syscall" cond="current_thread_system_call_not_null" />
                </state>
                <state id="wait_cpu">
                    <transition event="lttng_statedump_process_state" target="unknown" action="update_process_to_unknown" cond="test_for_unknown_process_state" />
                    <transition event="lttng_statedump_process_state" target="wait_blocked" action="update_process_to_wait_blocked" cond="test_for_wait_blocked_process_state" />
                    <transition event="lttng_statedump_process_state" target="wait_cpu" action="update_process_to_wait_cpu" cond="test_for_wait_cpu_process_state" />
                    <transition event="irq_handler_entry" target="interrupted" action="update_process_to_interrupted" />
                    <transition event="softirq_entry" target="interrupted" action="update_process_to_interrupted" />
                </state>
            </fsm>

        </patternHandler>
    </pattern>
</tmfxml>
